(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{248:function(e,a,t){"use strict";t.r(a);var r=t(0),n=Object(r.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_3-3-4-双向数据绑定原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-双向数据绑定原理","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.3.4 双向数据绑定原理")]),e._v(" "),t("h2",{attrs:{id:"_1-实现数据绑定的做法有大致如下几种："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现数据绑定的做法有大致如下几种：","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.实现数据绑定的做法有大致如下几种：")]),e._v(" "),t("ul",[t("li",[e._v("发布者-订阅者模式（backbone.js）")]),e._v(" "),t("li",[e._v("脏值检查（angular.js）")]),e._v(" "),t("li",[e._v("数据劫持（vue.js）")])]),e._v(" "),t("h3",{attrs:{id:"_1-1发布者-订阅者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1发布者-订阅者模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.1发布者-订阅者模式")]),e._v(" "),t("blockquote",[t("p",[e._v("使用自定义的data属性在HTML代码中指明绑定。所有绑定起来的JavaScript对象以及DOM元素都将“订阅”一个发布者对象。"),t("br"),e._v("\n任何时候如果JavaScript对象或者一个HTML输入字段被侦测到发生了变化，我们将代理事件到发布者-订阅者模式，"),t("br"),e._v("\n这会反过来将变化广播并传播到所有绑定的对象和元素。")])]),e._v(" "),t("h3",{attrs:{id:"_1-2脏值检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2脏值检查","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.2脏值检查")]),e._v(" "),t("blockquote",[t("p",[e._v("angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，")])]),e._v(" "),t("p",[e._v("最简单的方式就是通过 setInterval() 定时轮询检测数据变动，angular只有在指定的事件触发时进入脏值检测，大致如下：")]),e._v(" "),t("ul",[t("li",[e._v("DOM事件，譬如用户输入文本，点击按钮等。( ng-click )")]),e._v(" "),t("li",[e._v("XHR响应事件 ( $http )")]),e._v(" "),t("li",[e._v("浏览器Location变更事件 ( $location )")]),e._v(" "),t("li",[e._v("Timer事件( $timeout , $interval )")]),e._v(" "),t("li",[e._v("执行 $digest() 或 $apply()")])]),e._v(" "),t("h3",{attrs:{id:"_1-3数据劫持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3数据劫持","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.3数据劫持")]),e._v(" "),t("p",[e._v("通过 Object.defineProperty() 来劫持各个属性的 setter，getter，"),t("br"),e._v("\n在数据变动时发布消息给订阅者，触发相应的监听回调。")]),e._v(" "),t("h2",{attrs:{id:"用原生js的-object-defineproperty-写一个双向数据绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用原生js的-object-defineproperty-写一个双向数据绑定","aria-hidden":"true"}},[e._v("#")]),e._v(" 用原生js的 Object.defineProperty() 写一个双向数据绑定")]),e._v(" "),t("ul",[t("li",[e._v("用原生Javascript对象中的访问器属性实现双向数据绑定")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var input = document.querySelector("#text");\nvar data = {};\nObject.defineProperty(data, "name", {\n  configurable: true,\n  get: function(){\n      return input.value\n  },\n  set: function(newValue){\n    //this.value = newValue;\n    input.value = newValue;\n  }\n})\ndata.name = "sss";\ninput.onchange = function(){\n  data.name = data.name;\n}\n\n作者：darr250\n链接：https://www.jianshu.com/p/e8df6e3f6e34\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br")])]),t("h2",{attrs:{id:"object-defineproperty缺陷的："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty缺陷的：","aria-hidden":"true"}},[e._v("#")]),e._v(" Object.defineProperty缺陷的：")]),e._v(" "),t("ul",[t("li",[e._v("1.只能对属性进行数据劫持，并且需要深度遍历整个对象")]),e._v(" "),t("li",[e._v("2.对于数组不能监听数据的变化")])]),e._v(" "),t("h2",{attrs:{id:"proxy原生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#proxy原生","aria-hidden":"true"}},[e._v("#")]),e._v(" proxy原生")]),e._v(" "),t("ul",[t("li",[e._v("而proxy原生支持监听数组的变化，并且可以直接对整个对象进行拦截，")])]),e._v(" "),t("p",[e._v("所有Vue在下个版本中用proxy替换object.defineProperty")]),e._v(" "),t("h2",{attrs:{id:"vue-就地复用原则-key-原理-vue1-x-的-track-by-的理解？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-就地复用原则-key-原理-vue1-x-的-track-by-的理解？","aria-hidden":"true"}},[e._v("#")]),e._v(" vue 就地复用原则 | :key 原理 | vue1.x 的 track-by 的理解？")]),e._v(" "),t("blockquote",[t("p",[e._v("当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。"),t("br"),e._v("\n如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，"),t("br"),e._v("\n而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。")])]),e._v(" "),t("p",[e._v('这个类似 Vue 1.x 的 track-by="$index" 。')]),e._v(" "),t("p",[t("strong",[e._v("这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。")])]),e._v(" "),t("blockquote",[t("p",[e._v("建议尽可能在使用 v-for 时提供 key，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升")])]),e._v(" "),t("blockquote",[t("p",[e._v("key: key 的特殊属性主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。"),t("br"),e._v("\n如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。"),t("br"),e._v("\n使用 key，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。")])]),e._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/DMQ/mvvm",target:"_blank",rel:"noopener noreferrer"}},[e._v("DMQ/mvvm"),t("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=n.exports}}]);