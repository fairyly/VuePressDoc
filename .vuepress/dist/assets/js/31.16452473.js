(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{191:function(s,n,a){"use strict";a.r(n);var e=a(0),t=Object(e.a)({},function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"深入-react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深入-react","aria-hidden":"true"}},[s._v("#")]),s._v(" 深入 React")]),s._v(" "),a("h2",{attrs:{id:"_1-函数式编程才是-react-的精髓"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数式编程才是-react-的精髓","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.函数式编程才是 React 的精髓")]),s._v(" "),a("h2",{attrs:{id:"_2-jsx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-jsx","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.JSX")]),s._v(" "),a("blockquote",[a("p",[s._v("React 官方在早期为 JSX 语法解析开发了一套编译器 JSTransform，目前已经不再维护，"),a("br"),s._v("\n现在已全部采用 Babel 的 JSX 编译器实现。因为两者在功能上完全重复，"),a("br"),s._v("\n而 Babel 作为专门的JavaScript语法编译工具，提供了更为强大的功能，达到了“一处配置，统一运行”的目的。")])]),s._v(" "),a("blockquote",[a("p",[s._v("除了使用 JSX 语法，我们还可以使用 React.createElement() 和 React.cloneElement() 来构建 React 元素。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("2.1 虚拟元素可以理解为真实元素的对应，它的构建与更新都是在内存中完成的，并不会真正渲染到 DOM 中去。"),a("br"),s._v("\n在 React 中创建的虚拟元素可以分为两类，"),a("br"),s._v("\nDOM 元素（DOM element）与组件元素（component element），分别对应着原生 DOM 元素与自定义元素")]),s._v(" "),a("blockquote",[a("p",[s._v("元素类型: DOM 元素和组件元素,"),a("br"),s._v("\n对应规则是 HTML 标签首字母是否为小写字母，其中小写首字母对应 DOM   元素，而组件元素自然对应大写首字母;"),a("br"),s._v("\nJSX 还可以通过命名空间的方式使用组件元素，以解决组件相同名称冲突的问题，或是对一组组件进行归类")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("2.1.1 DOM 元素")])]),s._v(" "),a("li",[a("p",[s._v("2.1.2 组件元素")])])])]),s._v(" "),a("li",[a("p",[s._v("2.2 JSX 基本语法")]),s._v(" "),a("ul",[a("li",[s._v("2.2.1 定义标签时，只允许被一个标签包裹")]),s._v(" "),a("li",[s._v("2.2.2 标签一定要闭合")]),s._v(" "),a("li",[s._v("2.2.3 元素类型: DOM 元素和组件元素, HTML 标签首字母是否为小写字母，其中小写首字母对应 DOM 元素，而组件元素自然对应大写首字母")]),s._v(" "),a("li",[s._v("2.2.4 使用注释要用 {} 包起来")]),s._v(" "),a("li",[s._v("2.2.5 元素属性\n"),a("ul",[a("li",[a("p",[s._v("class 属性改为 className；")])]),s._v(" "),a("li",[a("p",[s._v("for 属性改为 htmlFor;"),a("br"),s._v("\n写自定义属性的时候，都由标准写法改为小驼峰写法 ;")])]),s._v(" "),a("li",[a("p",[s._v("Boolean 属性：要传 false 时，必须使用属性表达式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("例如，<Checkbox checked={true} /> 可以简写为 <Checkbox checked />，  \n反之 <Checkbox checked={false} /> 就可以省略 checked 属性。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("展开属性：可以使用 ES6 rest/spread 特性来提高效率：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const data = { name: 'foo', value: 'bar' };\nconst component = <Component name={data.name} value={data.value} />;\n可以写成：\nconst data = { name: 'foo', value: 'bar' };\nconst component = <Component {...data} />; \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("自定义 HTML 属性")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' 如果在 JSX 中往 DOM 元素中传入自定义属性，React 是不会渲染的：\n <div d="xxx">content</div>\n \n 如果要使用 HTML 自定义属性，要使用 data- 前缀，这与 HTML 标准也是一致的：\n <div data-attr="xxx">content</div>\n \n 然而，在自定义标签中任意的属性都是被支持的：\n <x-my-component custom-attr="foo" />\n 以 aria- 开头的网络无障碍属性同样可以正常使用：\n <div aria-hidden={true}></div>\n \n 不论组件是用什么方法来写，我们都需要知道，组件的最终目的是输出虚拟元素，也就是需\n 要被渲染到界面的结构。其核心渲染方法，或称为组件输出方法，就是 render 方法\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])])])]),s._v(" "),a("li",[s._v("2.2.6  JavaScript 属性表达式\n"),a("blockquote",[a("p",[s._v('属性值要使用表达式，只要用 {} 替换 "" 即可;')])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" <Person name={window.isLoggedIn ? window.name : ''} />;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[s._v("2.2.7 HTML 转义"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("   React 会将所有要显示到 DOM 的字符串转义，防止 XSS。所以，如果 JSX 中含有转义后的\n   实体字符，比如 &copy;（©），则最后 DOM 中不会正确显示，因为 React 自动把 &copy; 中的特\n   殊字符转义了。有几种解决办法：\n   -  直接使用 UTF-8 字符 ©；\n   -  使用对应字符的 Unicode 编码查询编码；\n   - 使用数组组装 `<div>{['cc ', <span>&copy;</span>, ' 2015']}</div>`；\n   - 直接插入原始的 HTML。\n   \n   此外，React 提供了 dangerouslySetInnerHTML 属性。正如其名，它的作用就是避免 React 转\n   义字符，在确定必要的情况下可以使用它：\n   <div dangerouslySetInnerHTML={{__html: 'cc &copy; 2015'}} /> \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])])])])]),s._v(" "),a("h2",{attrs:{id:"_3-react-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-组件","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.React 组件")]),s._v(" "),a("ul",[a("li",[s._v("3.1 React 组件的构建\n"),a("ul",[a("li",[s._v("React.createClass")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    const Button = React.createClass({\n        getDefaultProps() {\n            return {\n            color: 'blue',\n            text: 'Confirm',\n            };\n        },\n        render() {\n            const { color, text } = this.props;\n            return (\n                <button className={`btn btn-${color}`}>\n                    <em>{text}</em>\n                </button>\n            );\n        }\n    }); \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])]),s._v(" "),a("li",[s._v("ES6 classes"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    import React, { Component } from 'react';\n    class Button extends Component {\n        constructor(props) {\n            super(props);\n        }\n        static defaultProps = {\n            color: 'blue',\n            text: 'Confirm',\n        };\n        render() {\n            const { color, text } = this.props;\n            return (\n                <button className={`btn btn-${color}`}>\n                    <em>{text}</em>\n                </button>\n            );\n        }\n    } \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])]),s._v(" "),a("li",[s._v("无状态函数"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("使用无状态函数构建的组件称为无状态组件，这种构建方式是 0.14 版本之后新增的，且官方颇为推崇。示例代码如下：\nfunction Button({ color = 'blue', text = 'Confirm' }) {\n  return (\n    <button className={`btn btn-${color}`}>\n      <em>{text}</em>\n    </button>\n  );\n}\n无状态组件只传入 props 和 context 两个参数；也就是说，它不存在 state，也没有生命周\n期方法，组件本身即上面两种 React 组件构建方法中的 render 方法；\n\n它创建时始终保持了一个实例，避免了不必要的检查和内存分配，做到了内部优化；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"_6-reactdom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-reactdom","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.ReactDOM")]),s._v(" "),a("blockquote",[a("p",[s._v("ReactDOM 中的 API 非常少，只有 findDOMNode、unmountComponentAtNode 和 render。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nclass App extends Component {\n  componentDidMount() {\n    // myComp 是 Comp 的一个实例，因此需要用 findDOMNode 转换为相应的 DOM\n    const myComp = this.refs.myComp;\n    const dom = findDOMNode(myComp);\n  }\n  render() {\n    return (\n      <div>\n        <Comp ref=\"myComp\" />\n      </div>\n    );\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"_7-事件系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-事件系统","aria-hidden":"true"}},[s._v("#")]),s._v(" 7.事件系统")]),s._v(" "),a("blockquote"),s._v(" "),a("h3",{attrs:{id:"_7-1-合成事件的绑定方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-合成事件的绑定方式","aria-hidden":"true"}},[s._v("#")]),s._v(" 7.1 合成事件的绑定方式")]),s._v(" "),a("blockquote",[a("p",[s._v("React 合成事件的事件类型是 JavaScript 原生事件类型的一个子集。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<button onClick={this.handleClick}>Test</button> \n\n在 JSX 中，我们必须使用驼峰的形式来书写事件的属性名（比如\nonClick），而 HTML 事件则需要使用全部小写的属性名（比如 onclick）。\n\nReact 并不会像 DOM0 级事件那样将事件处理器直接绑定到 HTML 元素之上。React 仅仅是\n借鉴了这种写法而已\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_7-2合成事件的实现机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2合成事件的实现机制","aria-hidden":"true"}},[s._v("#")]),s._v(" 7.2合成事件的实现机制")]),s._v(" "),a("blockquote",[a("p",[s._v("在 React 底层，主要对合成事件做了两件事：事件委派和自动绑定。")])]),s._v(" "),a("ol",[a("li",[s._v("事件委派")])]),s._v(" "),a("blockquote",[a("p",[s._v("在使用 React 事件前，一定要熟悉它的事件代理机制。"),a("br"),s._v("\n它并不会把事件处理函数直接绑定到真实的节点上，而是把所有事件绑定到结构的最外层，"),a("br"),s._v("\n使用一个统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。"),a("br"),s._v("\n当组件挂载或卸载时，只是在这个统一的事件监听器上插入或删除一些对象；"),a("br"),s._v("\n当事件发生时，首先被这个统一的事件监听器处理，然后在映射里找到真正的事件处理函数并调用。"),a("br"),s._v("\n这样做简化了事件处理和回收机制，效率也有很大提升;")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("自动绑定")])]),s._v(" "),a("blockquote",[a("p",[s._v("在 React 组件中，每个方法的上下文都会指向该组件的实例，即自动绑定 this 为当前组件。"),a("br"),s._v("\n而且 React 还会对这种引用进行缓存，以达到 CPU 和内存的最优化。"),a("br"),s._v("\n在使用 ES6 classes 或者纯函数时，这种自动绑定就不复存在了，我们需要手动实现 this 的绑定。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("bind 方法。这个方法可以帮助我们绑定事件处理器内的 this ，并可以向事件处理器中传递参数，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import React, { Component } from 'react';\nclass App extends Component {\n  handleClick(e, arg) {\n    console.log(e, arg);\n  }\n  render() {\n    // 通过bind方法实现，可以传递参数\n    return <button onClick={this.handleClick.bind(this, 'test')}>Test</button>;\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("如果方法只绑定，不传参，那 stage 0 草案中提供了一个便捷的方案①——双冒号语法，"),a("br"),s._v("\n其作用与 this.handleClick.bind(this) 一致，并且 Babel 已经实现了该提案。比如：")]),s._v(" "),a("p",[s._v("——————————————————————————————————————————")]),s._v(" "),a("p",[s._v("① ECMAScrip This-Binding Syntanx，详见 https://github.com/zenparsing/es-function-bind。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import React, { Component } from 'react';\nclass App extends Component {\n  handleClick(e) {\n    console.log(e);\n  }\n  render() {\n    return <button onClick={::this.handleClick}>Test</button>;\n  }\n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("构造器内声明。")]),s._v(" "),a("blockquote",[a("p",[s._v("在组件的构造器内完成了 this的绑定，这种绑定方式的好处在于仅需要进行一次绑定，而不需要每次调用事件监听器时去执行绑定操作：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import React, { Component } from 'react';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(e) {\n    console.log(e);\n  }\n  render() {\n    return <button onClick={this.handleClick}>Test</button>;\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("箭头函数。")]),s._v(" "),a("blockquote",[a("p",[s._v("箭头函数不仅是函数的“语法糖”，它还自动绑定了定义此函数作用域的 this，"),a("br"),s._v("\n因此我们不需要再对它使用 bind 方法。比如，以下方式就能运行：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import React, { Component } from 'react';\nclass App extends Component {\n  const handleClick = (e) => {\n    console.log(e);\n  };\n  render() {\n    return <button onClick={this.handleClick}>Test</button>;\n  }\n}\n或\nimport React, { Component } from 'react';\nclass App extends Component {\n  handleClick(e) {\n    console.log(e);\n  }\n  render() { \n    return <button onClick={() => this.handleClick()}>Test</button>\n  }\n}\n使用上述几种方式，都能够实现在类定义的组件中绑定 this 上下文的效果。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("3.在 React 中使用原生事件")]),s._v(" "),a("blockquote",[a("p",[s._v("React 提供了很好用的合成事件系统，但这并不意味着在 React 架构下无法使用原生事件。\nReact 提供了完备的生命周期方法，其中 componentDidMount 会在组件已经完成安装并且在浏览器\n中存在真实的 DOM 后调用，此时我们就可以完成原生事件的绑定;")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import React, { Component } from 'react';\nclass NativeEventDemo extends Component {\n  componentDidMount() {\n  this.refs.button.addEventListener('click', e => {\n    this.handleClick(e);\n  });\n  }\n  handleClick(e) {\n    console.log(e);\n  }\n  componentWillUnmount() {\n    this.refs.button.removeEventListener('click');\n  }\n  render() {\n    return <button ref=\"button\">Test</button>;\n  }\n}\n值得注意的是，在 React 中使用 DOM 原生事件时，一定要在组件卸载时手动移除，\n否则很可能出现内存泄漏的问题。  \n而使用合成事件系统时则不需要，因为 React 内部已经帮你妥善地处理了;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("blockquote",[a("p",[s._v("尽量避免在 React 中混用合成事件和原生 DOM 事件,另外，用 reactEvent.nativeEvent.stopPropagation() 来阻止冒泡是不行的。\n阻止 React 事件冒泡的行为只能用于 React合成事件系统中，且没办法阻止原生事件的冒泡。\n反之，在原生事件中的阻止冒泡行为，却可以阻止 React 合成事件的传播;")])]),s._v(" "),a("blockquote",[a("p",[s._v("实际上，React 的合成事件系统只是原生 DOM 事件系统的一个子集。它仅仅实现了 DOM Level 3   的事件接口，并且统一了浏览器间的兼容问题。有些事件 React 并没有实现，"),a("br"),s._v("\n或者受某些限制没办法去实现，比如 window 的 resize 事件。"),a("br"),s._v("\n对于无法使用 React 合成事件的场景，我们还需要使用原生事件来完成")])]),s._v(" "),a("blockquote",[a("p",[s._v("浏览器原生 DOM 事件的传播可以分为 3 个阶段：事件捕获阶段、目标对象本身的事件处理程序调用以及事件冒泡。"),a("br"),s._v("\nReact的合成事件则并没有实现事件捕获，仅仅支持了事件冒泡机制;"),a("br"),s._v("\n阻止原生事件传播需要使用 e.preventDefault()，不过对于不支持该方法的浏览器（IE9 以下），只能使用 e.cancelBubble = true 来阻止。而在 React 合成事件中，只需要使用 e.preventDefault() 即可。")])])]),s._v(" "),a("li",[a("p",[s._v("8.受控组件和非受控组件")]),s._v(" "),a("blockquote",[a("p",[s._v("每当表单的状态发生变化时，都会被写入到组件的 state 中，这种组件在React 中被称为受控组件（controlled component）。"),a("br"),s._v("\n在受控组件中，组件渲染出的状态与它的 value 或 checked prop 相对应;\n如果一个表单组件没有 value props（单选按钮和复选框对应的是 checked prop）时，就可以称为非受控组件;"),a("br"),s._v("\n不提倡在 React 中使用非受控组件")])])]),s._v(" "),a("li",[a("p",[s._v("9.样式处理")]),s._v(" "),a("blockquote"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const style = {\n  color: 'white',\n  backgroundImage: `url(${imgUrl})`,\n  // 注意这里大写的 W，会转换成 -webkit-transition\n  WebkitTransition: 'all',\n  // ms 是唯一小写的浏览器前缀\n  msTransition: 'all',\n};\nconst component = <Component style={style} />; \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v("9.1 样式中的像素值")])]),s._v(" "),a("blockquote",[a("p",[s._v("当设置 width 和 height 这类与大小有关的样式时，大部分会以像素为单位，此时若重复输\n入 px，会很麻烦。为了提高效率，React 会自动对这样的属性添加 px。比如："),a("br"),s._v("\n// 渲染成 height: 10px"),a("br"),s._v("\nconst style = { height: 10 };")])]),s._v(" "),a("ul",[a("li",[s._v("9.2 使用 classnames 库\n"),a("blockquote",[a("p",[s._v("给组件动态设置 className")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  render() {\n    const btnClass = classNames({\n      'btn': true,\n      'btn-pressed': this.state.isPressed,\n      'btn-over': !this.state.isPressed && this.state.isHovered,\n    });\n    return <button className={btnClass}>{this.props.label}</button>;\n  } \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[s._v("9.3 CSS Modules\n"),a("blockquote"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("启用 CSS Modules 的代码如下：\n// webpack.config.js\ncss?modules&localIdentName=[name]__[local]-[hash:base64:5]\n加上 modules 即为启用，其中 localIdentName 是设置生成样式的命名规则\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),s._v("CSS Modules 实现了以下几点：\n"),a("ul",[a("li",[s._v("所有样式都是局部化的，解决了命名冲突和全局污染问题；")]),s._v(" "),a("li",[s._v("class 名的生成规则配置灵活，可以以此来压缩 class 名；")]),s._v(" "),a("li",[s._v("只需引用组件的 JavaScript，就能搞定组件所有的 JavaScript 和 CSS；")]),s._v(" "),a("li",[s._v("依然是 CSS，学习成本几乎为零。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("使用了 CSS Modules 后，就相当于给每个 class 名外加了 :local，以此来实现样式的局部化。\n  如果我们想切换到全局模式，可以使用 :global 包裹。示例代码如下：\n  .normal {\n    color: green;\n  }\n  /* 以上与下面等价 */\n  :local(.normal) {\n    color: green;\n  }\n  /* 定义全局样式 */\n  :global(.btn) {\n    color: red;\n  }\n  /* 定义多个全局样式 */\n  :global { \n    .link {\n     color: green;\n    }\n    .box {\n     color: yellow;\n    }\n  } \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),s._v("下面是具体项目中使用的 webpack 部分配置代码："),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  module: {\n   loaders: [{\n     test: /\\.jsx?$/,\n     loader: 'babel',\n   }, {\n     test: /\\.scss$/,\n     exclude: path.resolve(__dirname, 'src/styles'),\n     loader: 'style!css?modules&localIdentName=[name]__[local]!sass?sourceMap=true',\n   }, {\n     test: /\\.scss$/,\n     include: path.resolve(__dirname, 'src/styles'),\n     loader: 'style!css!sass?sourceMap=true',\n   }]\n  }\n  \n  /* src/app.js */\n  import './styles/app.scss';\n  import Component from './view/Component'\n  /* src/views/Component.js */\n  import './Component.scss';\n  \n  目录结构如下：\n  src\n  ├── app.js\n  ├── styles\n  │ ├── app.scss\n  │ └── normalize.scss\n  └── views\n   ├── Component.js\n   └── Component.scss\n  这样所有全局的样式都放到 src/styles/app.scss 中引入就可以了，其他所有目录（包括\n  src/views）中的样式都是局部的。\n  CSS Modules 很好地解决了 CSS 目前面临的模块化难题\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[s._v("10.组件间通信")]),s._v(" "),a("ul",[a("li",[s._v("10.1 父组件向子组件通信")]),s._v(" "),a("li",[s._v("10.2 子组件向父组件通信")]),s._v(" "),a("li",[s._v("10.3 跨级组件通信")]),s._v(" "),a("li",[s._v("10.4 没有嵌套关系的组件通信")])])]),s._v(" "),a("li",[a("p",[s._v("11.组件间抽象")]),s._v(" "),a("blockquote",[a("p",[s._v("在 React 组件的构建过程中，常常有这样的场景，有一类功能需要被不同的组件公用，此时就涉及抽象的话题。"),a("br"),s._v("\n在不同的设计理念下，有许多的抽象方法，而针对 React，我们重点讨论两种：mixin 和高阶组件;")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("11.1 mixin(混入)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  React 在使用 createClass 构建组件时提供了 mixin 属性，比如官方封装的 PureRenderMixin：\n  import React from 'react';\n  import PureRenderMixin from 'react-addons-pure-render-mixin';\n  React.createClass({\n      mixins: [PureRenderMixin],\n      render() {\n          return <div>foo</div>;\n      }\n  });\n  在 createClass 对象参数中传入数组 mixins，里面封装了我们所需要的模块\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ul",[a("li",[s._v("mixin 最大的一些问题")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  破坏了原有组件的封装\n  命名冲突\n  增加复杂性\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("针对这些困扰，React 社区提出了新的方式来取代 mixin，那就是高阶组件")])]),s._v(" "),a("ul",[a("li",[s._v("高阶组件\n"),a("blockquote",[a("p",[s._v("高阶组件（higher-order component），类似于高阶函数，它接受 React 组件作为输入，输出一个新的 React 组件;"),a("br"),s._v("\n实现高阶组件的方法有如下两种。")])]),s._v(" "),a("ul",[a("li",[s._v("属性代理（props proxy）。高阶组件通过被包裹的 React 组件来操作 props。"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  import React, { Component } from 'React';\n  const MyContainer = (WrappedComponent) =>\n  class extends Component {\n      render() {\n          return <WrappedComponent {...this.props} />;\n      }\n  } \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[s._v("反向继承（inheritance inversion）。高阶组件继承于被包裹的 React 组件。"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  const MyContainer = (WrappedComponent) =>\n    class extends WrappedComponent {\n      render() {\n        return super.render();\n      }\n    } \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])])])])])])])]),s._v(" "),a("li",[a("p",[s._v("12.组件性能优化")]),s._v(" "),a("blockquote",[a("p",[s._v("，我们都知道影响网页性能最大的因素是浏览器的重绘（reflow）和\n重排版（repaint）。React 背后的 Virtual DOM 就是尽可能地减少浏览器的重绘与重排版。\n对于性能优化这个主题，我们往往会基于“不信任”的前提，即我们需要提高 React Virtual\nDOM 的效率。从 React 的渲染过程来看，如何防止不避要的渲染可能是最需要去解决的问题。\n然而，针对这个问题，React 官方提供了一个便捷的方法来解决，那就是 PureRender。")])])]),s._v(" "),a("li",[a("p",[s._v("12.1 纯函数")])]),s._v(" "),a("li",[a("p",[s._v("12.2 PureRender")])]),s._v(" "),a("li",[a("p",[s._v("12.3 Immutable")])]),s._v(" "),a("li",[a("p",[s._v("12.4 key")])]),s._v(" "),a("li",[a("p",[s._v("12.5 react-addons-perf")])])]),s._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://fairyly.github.io/react_study/%E6%B7%B1%E5%85%A5React%E6%8A%80%E6%9C%AF%E6%A0%88.pdf",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入 React 技术栈"),a("OutboundLink")],1)])])])])])},[],!1,null,null,null);n.default=t.exports}}]);