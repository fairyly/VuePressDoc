(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{191:function(n,s,a){"use strict";a.r(s);var e=a(0),l=Object(e.a)({},function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_3-1-2-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-类型转换","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.1.2 类型转换")]),n._v(" "),a("h2",{attrs:{id:"_2-原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-原始类型","aria-hidden":"true"}},[n._v("#")]),n._v(" 2.原始类型")]),n._v(" "),a("p",[n._v("基本类型（基本数值、基本数据类型）是指非 对象 并且无方法的数据。")]),n._v(" "),a("p",[n._v("在 JavaScript 中，共有6种基本数据类型：string，number，boolean，null，undefined，symbol")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive",target:"_blank",rel:"noopener noreferrer"}},[n._v("MDN-原始数据"),a("OutboundLink")],1)])]),n._v(" "),a("h2",{attrs:{id:"_3-值类型和引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-值类型和引用类型","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.值类型和引用类型")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("JavaScript中的变量类型有哪些？")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("（1）值类型：字符串（string）、数值（number）、布尔值（boolean）、none、undefined")])]),n._v(" "),a("li",[a("p",[n._v("（2）引用类型：对象（Object）、数组（Array）、函数（Function）")])])])]),n._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/leiting/p/8081413.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("js中的值类型和引用类型的区别"),a("OutboundLink")],1)]),n._v(" "),a("ul",[a("li",[n._v("值类型：1、占用空间固定，保存在栈中\n"),a("ul",[a("li",[n._v("2、保存与复制的是值本身")]),n._v(" "),a("li",[n._v("3、使用typeof检测数据的类型")]),n._v(" "),a("li",[n._v("4、基本类型数据是值类型")])])]),n._v(" "),a("li",[n._v("引用类型：1、占用空间不固定，保存在堆中\n"),a("ul",[a("li",[n._v("2、保存与复制的是指向对象的一个指针")]),n._v(" "),a("li",[n._v("3、使用instanceof检测数据类型")]),n._v(" "),a("li",[n._v("4、使用new()方法构造出的对象是引用型")])])])])])]),n._v(" "),a("h2",{attrs:{id:"_4-隐式-显式-名义和鸭子类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-隐式-显式-名义和鸭子类型","aria-hidden":"true"}},[n._v("#")]),n._v(" 4.隐式, 显式, 名义和鸭子类型")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var a = 42;\nvar b = a + \"\"; // 隐式强制类型转换\nvar c = String( a ); // 显式强制类型转换\n\nconsole.log(1+ + '2'+'2')   // 32\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("隐式类型转换")]),n._v(" "),a("ul",[a("li",[n._v("不同的数据类型之间可以做运算，是因为JavaScript引擎在运算之前会悄悄的把他们进行了隐式类型转换的")]),n._v(" "),a("li",[n._v("比如，一个字符串可以和数字相加。")]),n._v(" "),a("li",[n._v("如果字符串和数字相加，JavaScript会自动把数字转换成字符的，不管数字在前还是字符串在前")]),n._v(" "),a("li",[n._v("1+null  // 1")]),n._v(" "),a("li",[n._v("1+undefined // NaN")]),n._v(" "),a("li",[n._v("1+NaN // NaN")])])]),n._v(" "),a("li",[a("p",[n._v("显式解析数字字符串")]),n._v(" "),a("ul",[a("li",[n._v("解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字。但解析和转换两者之间还是有明显的差别。")]),n._v(" "),a("li",[n._v('var a = "42";')]),n._v(" "),a("li",[n._v('var b = "42px";')]),n._v(" "),a("li",[n._v("Number( a ); // 42")]),n._v(" "),a("li",[n._v("parseInt( a ); // 42")]),n._v(" "),a("li",[n._v("Number( b ); // NaN")]),n._v(" "),a("li",[n._v("parseInt( b ); // 42")]),n._v(" "),a("li",[n._v("解析允许字符串中含有非数字字符，解析按从做到右的顺序，如果遇到非数字字符就停止。而转换不允许出现非数字字符，否则会失败并返回NaN。")])])]),n._v(" "),a("li",[a("p",[n._v('[]+{} //"[object Object]"')])]),n._v(" "),a("li",[a("p",[n._v("{}+[] // 0")]),n._v(" "),a("ul",[a("li",[n._v("这是两个复杂数据结构相加的例子，"),a("strong",[n._v("js的隐式类型转换")])]),n._v(" "),a("li",[n._v("原因是有的js解释器会将开头的 {} 看作一个代码块，而不是一个js对象，于是真正参与运算的是+[]，就是将[]转换为number，于是得出答案0")]),n._v(" "),a("li",[n._v("那么我们如何证明{}被看作一个代码块而不是一个js对象呢？很简单， 我们可以在{}里写上一些语句，比如:\n"),a("code",[n._v('{console.log("hello")} + []')])])])]),n._v(" "),a("li",[a("p",[n._v("Number(undefined) // NaN")])]),n._v(" "),a("li",[a("p",[n._v("Number(null)  // 0")])]),n._v(" "),a("li",[a("p",[n._v("Number(NaN) // NaN")])]),n._v(" "),a("li",[a("p",[n._v("Number(true)  // 1")])]),n._v(" "),a("li",[a("p",[n._v("Number(false)  // 0")])]),n._v(" "),a("li",[a("p",[n._v("ToString")]),n._v(" "),a("ul",[a("li",[n._v("它负责处理非字符串到字符串的强制类型转换。")]),n._v(" "),a("li",[n._v("基本类型值的字符串化规则为：null转换为“null”，undefined转换为“undefined”，true转换为“true”。")]),n._v(" "),a("li",[n._v("数字的字符串化则遵循通用规则。不过那些极小和极大的数字使用指数形式：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 1.07 连续乘以七个 1000\nvar a = 1.07 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000;\n// 七个1000一共21位数字\na.toString(); // "1.07e21"\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])])]),n._v(" "),a("li",[a("p",[n._v("JSON字符串化: JSON.stringify(..)并不是强制类型转换")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('JSON.stringify( 42 ); // "42"\nJSON.stringify( "42" ); // ""42"" （含有双引号的字符串）\nJSON.stringify( null ); // "null"\nJSON.stringify( true ); // "true"\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("ul",[a("li",[n._v("所有安全的JSON值都可以使用JSON.stringify(..)字符串化。安全的JSON值是指你能够呈现为有效JSON格式的值。")]),n._v(" "),a("li",[n._v("JSON.stringify(..)在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null（以保证单元位置不变）。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('JSON.stringify(undefined); // undefined\nJSON.stringify(function () { }); // undefined\nJSON.stringify(\n    [1, undefined, function () { }, 4]\n); // "[1,null,null,4]"\nJSON.stringify(\n    { a: 2, b: function () { } }\n); // "{"a":2}"\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("ul",[a("li",[n._v("向JSON.stringify(..)传递一个可选参数replacer，它可以是数组或者函数，用来指定对象序列化过程中哪些属性应该被处理，哪些应该被排除。\n"),a("ul",[a("li",[n._v("如果replacer是一个数组，那么它必须是一个字符串数组，其中包含序列化要处理的对象的属性名称，除此之外其他的属性则被忽略。")]),n._v(" "),a("li",[n._v("如果replacer是一个函数，它会对对象本身调用一次，然后对对象中的每个属性各调用一次，每次传递两个参数，键和值。如果要忽略某个键就返回undefined，否则返回指定的值。")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('var a = {\n    b: 42,\n    c: "42",\n    d: [1, 2, 3]\n};\nJSON.stringify(a, ["b", "c"]); // "{"b":42,"c":"42"}"\nJSON.stringify(a, function (k, v) {\n    if (k !== "c") return v;\n});\n    // "{"b":42,"d":[1,2,3]}"\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("JSON.string还有一个可选参数space，用来指定输出的缩进格式。")]),n._v(" "),a("ul",[a("li",[n._v("space为正整数时是指定每一级缩进的字符数，它还可以是字符串，此时最前面的十个字符被用于每一级的缩进：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('var a = {\n    b: 42,\n    c: "42",\n    d: [1, 2, 3]\n};\nJSON.stringify(a, null, 3);\n// "{\n// "b": 42,\n// "c": "42",\n// "d": [\n// 1,\n// 2,\n// 3\n// ]\n// }"\nJSON.stringify( a, null, "-----" );\n// "{\n// -----"b": 42,\n// -----"c": "42",\n// -----"d": [\n// ----------1,\n// ----------2,\n// ----------3\n// -----]\n// }"\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br")])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("奇特的 "),a("code",[n._v("~")]),n._v(" 运算符")])])]),n._v(" "),a("li",[a("p",[n._v("indexOf(..)不仅能够得到子字符串的位置，还可以用来检查字符串中是否包含指定的子字符串，相当于一个条件判断。例如：")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('var a = "Hello World";\nif (a.indexOf("lo") >= 0) { // true\n    // 找到匹配！\n}\nif (a.indexOf("lo") != -1) { // true\n    // 找到匹配！\n}\nif (a.indexOf("ol") < 0) { // true\n    // 没有找到匹配！\n}\nif (a.indexOf("ol") == -1) { // true\n    // 没有找到匹配！\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("ul",[a("li",[n._v("= 0 和== -1这样的写法不是很好，"),a("strong",[n._v("称为“抽象渗漏”")]),n._v("，意思是在代码中暴露了底层的实现细节，这里是指用-1作为失败时的返回值，这些细节应该被屏蔽掉。\n"),a("ul",[a("li",[n._v("现在我们终于明白有什么用处了！和indexOf()一起可以将结果强制类型转换（实际上仅仅是转换）为真/假值：")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('var a = "Hello World";\n~a.indexOf("lo"); // -4 <-- 真值!\nif (~a.indexOf("lo")) { // true\n    // 找到匹配！\n}\n~a.indexOf("ol"); // 0 <-- 假值!\n!~a.indexOf("ol"); // true\nif (!~a.indexOf("ol")) { // true\n    // 没有找到匹配！\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("如果indexOf(..)返回-1，"),a("code",[n._v("~")]),n._v("将其转换为假值0，其他情况一律转换为真值。")]),n._v(" "),a("ul",[a("li",[n._v("假值的相等比较")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('"0" == null; // false\n"0" == undefined; // false\n"0" == false; // true -- 晕！\n"0" == NaN; // false\n"0" == 0; // true\n"0" == ""; // false\nfalse == null; // false\nfalse == undefined; // false\nfalse == NaN; // false\nfalse == 0; // true -- 晕！\nfalse == ""; // true -- 晕！\nfalse == []; // true -- 晕！\nfalse == {}; // false\n"" == null; // false\n"" == undefined; // false\n"" == NaN; // false\n"" == 0; // true -- 晕！\n"" == []; // true -- 晕！\n"" == {}; // false\n0 == null; // false\n0 == undefined; // false\n0 == NaN; // false\n0 == []; // true -- 晕！\n0 == {}; // false\n3、极端情况\n\n[] == ![] // true\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("ul",[a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/777a89b4ed9a",target:"_blank",rel:"noopener noreferrer"}},[n._v("你不知道的JavaScript（中卷）|强制类型转换"),a("OutboundLink")],1)])]),n._v(" "),a("hr"),n._v(" "),a("hr"),n._v(" "),a("ul",[a("li",[a("p",[n._v("编程语言按照数据类型大体可以分为两类，一类是静态类型语言，另一类是动态类型语言")]),n._v(" "),a("ul",[a("li",[n._v("静态类型语言在编译时便已确定变量的类型，")]),n._v(" "),a("li",[n._v("动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。")])])]),n._v(" "),a("li",[a("p",[n._v("鸭子类型指导我们只关注对象的行为，而不关注对象本身，")])])]),n._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[n._v("#")]),n._v(" 参考")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/fairyly/front-end-summary/blob/gh-pages/4.0.1%20JavaScript%20%E5%BC%80%E5%8F%91%E8%80%85%E5%BA%94%E6%87%82%E7%9A%84%2033%20%E4%B8%AA%E6%A6%82%E5%BF%B5.md#4%E9%9A%90%E5%BC%8F-%E6%98%BE%E5%BC%8F-%E5%90%8D%E4%B9%89%E5%92%8C%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[n._v("JavaScript 开发者应懂的 33 个概念---.隐式, 显式, 名义和鸭子类型"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:""}})])])])},[],!1,null,null,null);s.default=l.exports}}]);