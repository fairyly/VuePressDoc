(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{205:function(n,a,s){"use strict";s.r(a);var r=s(0),i=Object(r.a)({},function(){var n=this,a=n.$createElement,s=n._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"_4-1-7-堆排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-7-堆排序","aria-hidden":"true"}},[n._v("#")]),n._v(" 4.1.7 堆排序")]),n._v(" "),s("blockquote",[s("p",[n._v("思想：实质上是完全二叉树，必须满足：树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子（若存在）结点的关键字。"),s("br"),n._v("\n每次交换第一个和最后一个元素，输出最后一个元素（最大值），然后把剩下元素重新调整为大根堆。"),s("br"),n._v("\n当输出完最后一个元素后，这个数组已经是按照从小到大的顺序排列了。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 1) 初始堆：将原始数组调整成大根堆的方法——筛选算法:子节点都比父节点小\n// 2) 堆排序： 每次将堆顶元素与数组最后面的且没有被置换的元素互换。\n// 参考代码： http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/\nfunction sort8(array) {\n  var result = array.slice(0);\n\n  function swap(array, i, j) {\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  function maxHeapify(array, index, heapSize) {\n    var iMax, iLeft, iRight;\n    while (true) {\n      iMax = index;\n      iLeft = 2 * index + 1;\n      iRight = 2 * (index + 1);\n\n      if (iLeft < heapSize && array[index] < array[iLeft]) {\n        iMax = iLeft;\n      }\n\n      if (iRight < heapSize && array[iMax] < array[iRight]) {\n        iMax = iRight;\n      }\n\n      if (iMax != index) {\n        swap(array, iMax, index);\n        index = iMax;\n      } else {\n        break;\n      }\n    }\n  }\n\n  function buildMaxHeap(array) {\n    var i, iParent = Math.floor(array.length / 2) - 1;\n\n    for (i = iParent; i >= 0; i--) {\n      maxHeapify(array, i, array.length);\n    }\n  }\n\n  function sort(array) {\n    buildMaxHeap(array);\n\n    for (var i = array.length - 1; i > 0; i--) {\n      swap(array, 0, i);\n      maxHeapify(array, 0, i);\n    }\n    return array;\n  }\n\n  return sort(result);\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br")])]),s("h2",{attrs:{id:"选择排序-堆排序算法（javascript版）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择排序-堆排序算法（javascript版）","aria-hidden":"true"}},[n._v("#")]),n._v(" 选择排序---堆排序算法（Javascript版）")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("* 排序思路：（降序）\n * 将堆根保存于尾部，并对剩余序列调用调整函数，调整完成后，再将最大跟保存于尾部-1（-1，-2，...，-i），\n * 再对剩余序列进行调整，反复进行该过程，直至排序完成。\n */\n\n/* 将最大的元素调整到堆顶*/\nfunction AdjustHeap(arr, pos, len){\n    var swap = arr[pos];      //保存当前节点\n    var child = pos * 2 + 1;  //定位到当前节点的左边的子节点\n    while(child < len){       //递归遍历所有的子节点\n        //判断当前节点是否有右节点，若右节点较大，就采用右节点和当前节点进行比较\n        if(child + 1 < len && arr[child] < arr[child + 1]){\n            child += 1;\n        }\n        //比较当前节点和最大的子节点，小于就交换，交换后将当前节点定位到子节点上\n        if(arr[pos] < arr[child]){\n            arr[pos] = arr[child];\n            pos = child;\n            child = pos * 2 + 1;\n        }\n        else{\n            break;\n        }\n        arr[pos] = swap;\n    }\n}\n\n/* 构建堆：\n * 满足：树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子结点的关键字。\n * 实现：从最后一个拥有子节点的节点开始，将该节点和其他节点进行比较，将最大的数交换给该节点，\n *      交换后再依次向前节点进行相同的交换处理，直到构建出大顶堆。\n */\nfunction BuildHeap(arr){\n  for(var i=arr.length/2; i>=0; i--){  //构建打顶堆\n      AdjustHeap(arr, i, arr.length);\n  }\n}\n\n/*堆排序算法*/\nfunction HeapSort(arr){\n    BuildHeap(arr); //构建堆\n    for(var i=arr.length-1; i>0; i--){   //从数组的尾部进行调整\n        var swap = arr[i];  //堆顶永远是最大的元素,将堆顶和尾部元素交换，最大元素就保存在尾部，并且不参与后面的调整\n        arr[i] = arr[0];\n        arr[0] = swap;\n        AdjustHeap(arr, 0, i); //将最大的元素进行调整，将最大的元素调整到堆顶\n    }\n}\n\nvar arr = [46,12,33,72,68,19,80,33];\nconsole.log('before: ' + arr);\nHeapSort(arr);\nconsole.log(' after: ' + arr);\n--------------------- \n作者：Cynthia（小英子） \n来源：CSDN \n原文：https://blog.csdn.net/ganyingxie123456/article/details/69053478 \n版权声明：本文为博主原创文章，转载请附上博文链接！\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br")])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[n._v("#")]),n._v(" 参考")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[n._v("wiki"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/7e6589306a27",target:"_blank",rel:"noopener noreferrer"}},[n._v("排序图解：js排序算法实现"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"http://www.cnblogs.com/kongxianghai/p/4004469.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("选择排序---堆排序算法（Javascript版）"),s("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=i.exports}}]);