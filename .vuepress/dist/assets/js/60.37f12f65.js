(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{217:function(n,s,a){"use strict";a.r(s);var e=a(0),t=Object(e.a)({},function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_3-3-9-js-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-9-js-继承","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.3.9 js 继承")]),n._v(" "),a("blockquote",[a("p",[n._v("主要依靠原型链")])]),n._v(" "),a("h2",{attrs:{id:"_1-使用原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用原型链","aria-hidden":"true"}},[n._v("#")]),n._v(" 1.使用原型链")]),n._v(" "),a("blockquote",[a("p",[n._v("思想："),a("strong",[n._v("利用原型让一个引用类型继承另一个引用类型的属性和方法")]),a("br"),n._v("\nb继承a实际上就是创建a的实例，并将该实例赋予给b.prototype.实现的本质是重写原型对象，代之以一个新类型的实例。"),a("br"),n._v("\n换句话说原来存在于a中的属性和方法现在也存在于b.prototype中")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function A() {}\nfunction B() {}\n\nB.prototype = new A();\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("缺点：")])]),n._v(" "),a("li",[a("p",[n._v("1.包含引用类型值的原型属性会被所有实例共享，"),a("br"),n._v("\n(基本类型值也会被所有实例共享，但是子类型实例可以通过设置一个同名属性屏蔽超类型原型中的属性从而拥有自己的属性，"),a("br"),n._v("\n而引用类型的值是会修改原型中的属性的，从而影响所有实例)"),a("br"),n._v("\n这也是为什么要在构造函数中，而不是在原型对象中定义属性的原因。")])]),n._v(" "),a("li",[a("p",[n._v("2.在创建子类型的实例时，不能向超类型的构造函数中传递参数。"),a("br"),n._v("\n实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。")])])]),n._v(" "),a("blockquote",[a("p",[n._v("基于以上两点，实践中很少会单独使用原型链。")])]),n._v(" "),a("hr"),n._v(" "),a("h2",{attrs:{id:"_2-借用构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-借用构造函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 2.借用构造函数")]),n._v(" "),a("blockquote",[a("p",[n._v("思想："),a("strong",[n._v("在子类型构造函数的内部调用超类型构造函数。")]),a("br"),n._v("\n函数只不过是在特定环境中执行代码的对象。调用 call() 方法，")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function A(){}\nfunction B(){\n  A.call(this);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("优点：")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("1.可以在子类型中向超类型传递参数（相对于原型链而言）。")])]),n._v(" "),a("li",[a("p",[n._v("2.可以解决原型链继承所带来的引用类型值所带来的问题。")])])])]),n._v(" "),a("li",[a("p",[n._v("缺点：")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("1.为了确保SuperType构造函数不会重写子类型的属性，必须在调用超类型构造函数后，再添加应该在子类型中定义的属性。"),a("br"),n._v("\n（这也算不上什么缺点，原型链也是这样的，必须确保超类型的实例替换掉子类型的原型之后再定义自己的原型方法）")])]),n._v(" "),a("li",[a("p",[n._v("2.方法都在构造函数中定义了，因此函数复用就无从谈起了。")])]),n._v(" "),a("li",[a("p",[n._v("3.在超类型的原型中定义的方法，对子类型而言也是不可见的，"),a("br"),n._v("\n（？因为这是原型链的原理决定的，只有子类型实例会继承超类型的属性和原型方法，而构造函数模式只是在子类型中引用了超类型构造函数）"),a("br"),n._v("\n结果所有类型都只能使用构造函数模式。")])])])])]),n._v(" "),a("blockquote",[a("p",[n._v("故借用构造函数模式也是很少单独使用的。")])]),n._v(" "),a("h2",{attrs:{id:"_3-组合继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-组合继承","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.组合继承")]),n._v(" "),a("blockquote",[a("p",[n._v("思想：用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。"),a("br"),n._v("\n这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function B(){}\nfunction A(){}\nB.prototype = new A();\n\nfunction B(){\n  A.call(this);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("优点：")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("1.可以让每个不同的实例拥有自己的属性，同时又共享了相同的方法。")])]),n._v(" "),a("li",[a("p",[n._v("2.避免了原型链继承和借用构造函数继承的缺点，融合了它们的优点。")])])])]),n._v(" "),a("li",[a("p",[n._v("缺点：")]),n._v(" "),a("ul",[a("li",[n._v("1.无论什么情况下，都会调用两次超类型构造函数。")])])])]),n._v(" "),a("p",[n._v("故组合继承模式成为了JS中最常用的继承模式。")]),n._v(" "),a("p",[n._v("而且，instanceof和isPrototypeOf ()也能用于识别基于组合继承创建的对象。")]),n._v(" "),a("h3",{attrs:{id:"_4-原型式继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-原型式继承","aria-hidden":"true"}},[n._v("#")]),n._v(" 4.原型式继承")]),n._v(" "),a("blockquote",[a("p",[n._v("思想：借助原型可以基于已有的对象创建新对象。从本质上讲，object（）对传入其中的对象执行了一次浅复制。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function object(o){ \n    function F(){}\n    F.prototype=o;\n    return new F();\n\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("优点：1.在没有必要兴师动众地创建构造函数，而只想让一个对象与另一个对象保持类似的情况下，原型式继承是完全可以胜任的。")])]),n._v(" "),a("li",[a("p",[n._v("缺点：原型式继承与原型链继承有相同的缺点，包含引用类型的值始终都会共享相应的值。")])])]),n._v(" "),a("h2",{attrs:{id:"_5-寄生式继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-寄生式继承","aria-hidden":"true"}},[n._v("#")]),n._v(" 5.寄生式继承")]),n._v(" "),a("blockquote",[a("p",[n._v("思想： 与原型式继承紧密相关，创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真的是它做了所有工作一样返回对象")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function createAnother(original){\n  var clone=object(original);\n  clone.sayHi=function(){\n    alert("hi");\n  };\n  return clone;\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("优点：")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("1.在主要考虑对象而不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式。")])]),n._v(" "),a("li",[a("p",[n._v("2.object（）函数不是必需的，任何能返回新对象的函数都适用于此模式。")])])])]),n._v(" "),a("li",[a("p",[n._v("缺点:1.适用寄生式继承来为对象添加函数，会由于不能做到函数复用而降低效率，这一点与构造函数模式类似。")])])]),n._v(" "),a("h2",{attrs:{id:"_6-寄生组合式继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-寄生组合式继承","aria-hidden":"true"}},[n._v("#")]),n._v(" 6.寄生组合式继承")]),n._v(" "),a("blockquote",[a("p",[n._v("思想：通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。"),a("br"),n._v("\n不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非是超类型原型的一个副本而已。"),a("br"),n._v("\n本质上，就是使用寄生式继承来继承超类型的原型，然后将结果指定给子类型的原型")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('原组合继承： \nfunction SuperType(name){\n  this.name=name;\n  this.colors=["red","blue","green"];\n}\n\nSuperType.prototype.sayName=function(){\n  alert(this.name);\n};\n\nfunction SubType(name,age){\n  SuperType.call(this,name);        // 第二次调用\n  this.age=age;\n}\n\nSubType.prototype = new (SuperType);  // 第一次调用\n\nSubType.prototype.sayAge=function(){\n  alert (this.age);\n}\n\n寄生组合继承：\n\nfunction SuperType(name){\n  this.name=name;\n  this.colors=["red","blue","green"];\n}\n\nSuperType.prototype.sayName=function(){\n  alert(this.name);\n};\n\nfunction SubType(name,age){\n  SuperType.call(this,name);        // 第二次调用\n  this.age=age;\n}\n\ninheritPrototype(SubType,SuperType)\n\nSubType.prototype.sayAge=function(){\n  alert (this.age);\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br")])]),a("ul",[a("li",[n._v("优点：")]),n._v(" "),a("li",[n._v("1.它只调用了一次超类型的构造函数，效率较高。并且避免了在子类型的原型上创建不必要的，多余的属性。节省内存。")]),n._v(" "),a("li",[n._v("2.原型链还能保持不变。因此还能正常使用instanceof和isPrototypeOf()。")])]),n._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[n._v("#")]),n._v(" 参考")]),n._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://fairyly.github.io/mybooks/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89%E4%B8%AD%E6%96%87%20%E9%AB%98%E6%B8%85%20%E5%AE%8C%E6%95%B4.pdf",target:"_blank",rel:"noopener noreferrer"}},[n._v("JavaScript高级程序设计 (第3版)---6.继承"),a("OutboundLink")],1)])]),n._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://juejin.im/post/58f94c9bb123db411953691b",target:"_blank",rel:"noopener noreferrer"}},[n._v("JS原型链与继承"),a("OutboundLink")],1)])]),n._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://github.com/fairyly/front-end-summary/blob/gh-pages/4.7.6%20%20%E7%8E%B0%E5%9C%A8%E6%9C%89%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0A%E5%92%8C%E5%87%BD%E6%95%B0B%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%AE%9E%E7%8E%B0B%E7%BB%A7%E6%89%BFA.md",target:"_blank",rel:"noopener noreferrer"}},[n._v("ront-end-summary---实现B继承A"),a("OutboundLink")],1)])])])])},[],!1,null,null,null);s.default=t.exports}}]);