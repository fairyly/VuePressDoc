(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{195:function(e,r,s){"use strict";s.r(r);var a=s(0),n=Object(a.a)({},function(){var e=this,r=e.$createElement,s=e._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_3-0-commonjs-cmd-amd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-commonjs-cmd-amd","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.0 Commonjs,CMD,AMD")]),e._v(" "),s("h2",{attrs:{id:"commonjs规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs规范","aria-hidden":"true"}},[e._v("#")]),e._v(" Commonjs规范")]),e._v(" "),s("blockquote",[s("p",[e._v("CommonJS定义的模块分为:{模块引用(require)} {模块定义(exports)} {模块标识(module)};"),s("br"),e._v("\nrequire()用来引入外部模块；exports对象用于导出当前模块的方法或变量，唯一的导出口；module对象就代表模块本身。\ncommonjs是服务器模块的规范，nodejs实现了规范")])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("单独的文件就是一个模块，每个模块拥有自己的作用域；")])]),e._v(" "),s("li",[s("p",[e._v("通过module.exports来将对象和方法抛出去；")])]),e._v(" "),s("li",[s("p",[e._v("通过require来引入，就可以访问挂载的对象，并且直接调用变量；")])])]),e._v(" "),s("h2",{attrs:{id:"每个模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每个模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 每个模块")]),e._v(" "),s("ul",[s("li",[e._v("每个都有个module对象，这个对象不是全局变量，而是本地变量")]),e._v(" "),s("li",[e._v("exports = module.exports，可以放弃使用exports，只使用module.exports")])]),e._v(" "),s("blockquote",[s("p",[e._v("CommonJS就是个同步加载方案，因为服务器一般文件都在本地硬盘，")])]),e._v(" "),s("blockquote",[s("p",[e._v("require命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。")])]),e._v(" "),s("p",[e._v("第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性。")]),e._v(" "),s("h2",{attrs:{id:"commonjs模块的特点如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs模块的特点如下","aria-hidden":"true"}},[e._v("#")]),e._v(" CommonJS模块的特点如下:")]),e._v(" "),s("blockquote",[s("p",[e._v("所有代码都运行在模块作用域，不会污染全局作用域。"),s("br"),e._v("\n模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，"),s("br"),e._v("\n以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。"),s("br"),e._v("\n模块加载的顺序，按照其在代码中出现的顺序。")])]),e._v(" "),s("h2",{attrs:{id:"require的内部处理流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#require的内部处理流程","aria-hidden":"true"}},[e._v("#")]),e._v(" require的内部处理流程")]),e._v(" "),s("p",[e._v("require命令是CommonJS规范之中，用来加载其他模块的命令。")]),e._v(" "),s("p",[e._v("它其实不是一个全局命令，而是指向当前模块的module.require命令，而后者又调用Node的内部命令Module._load。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Module._load = function(request, parent, isMain) {\n  // 1. 检查 Module._cache，是否缓存之中有指定模块\n  // 2. 如果缓存之中没有，就创建一个新的Module实例\n  // 3. 将它保存到缓存\n  // 4. 使用 module.load() 加载指定的模块文件，\n  //    读取文件内容之后，使用 module.compile() 执行文件代码\n  // 5. 如果加载/解析过程报错，就从缓存删除该模块\n  // 6. 返回该模块的 module.exports\n};\n上面的第4步，采用module.compile()执行指定模块的脚本，逻辑如下。\n\nModule.prototype._compile = function(content, filename) {\n  // 1. 生成一个require函数，指向module.require\n  // 2. 加载其他辅助方法到require\n  // 3. 将文件内容放到一个函数之中，该函数可调用 require\n  // 4. 执行该函数\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[e._v("上面的第1步和第2步，require函数及其辅助方法主要如下")]),e._v(" "),s("h2",{attrs:{id:"require函数及其辅助方法主要如下。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#require函数及其辅助方法主要如下。","aria-hidden":"true"}},[e._v("#")]),e._v(" require函数及其辅助方法主要如下。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("require(): 加载外部模块\nrequire.resolve()：将模块名解析到一个绝对路径\nrequire.main：指向主模块\nrequire.cache：指向所有缓存的模块\nrequire.extensions：根据文件的后缀名，调用不同的执行函数\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("++++++++++++++++++++++++++++++++++++++++++++++++++++")]),e._v(" "),s("h2",{attrs:{id:"amd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amd","aria-hidden":"true"}},[e._v("#")]),e._v(" AMD")]),e._v(" "),s("blockquote",[s("p",[e._v('意思就是"异步模块定义"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行'),s("br"),e._v("\n代表：require.js")])]),e._v(" "),s("blockquote",[s("p",[e._v("推崇依赖前置，提前执行")])]),e._v(" "),s("p",[e._v("require.js的诞生，就是为了解决这两个问题：")]),e._v(" "),s("p",[e._v("（1）实现js文件的异步加载，避免网页失去响应；")]),e._v(" "),s("p",[e._v("（2）管理模块之间的依赖性，便于代码的编写和维护。")]),e._v(" "),s("p",[e._v("+++++++++++++++++++++++++++++++++++++++++++++++++++")]),e._v(" "),s("h2",{attrs:{id:"cmd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmd","aria-hidden":"true"}},[e._v("#")]),e._v(" CMD")]),e._v(" "),s("blockquote",[s("p",[e._v("推崇依赖就近原则，延迟执行"),s("br"),e._v("\n代表： sea.js")])]),e._v(" "),s("h2",{attrs:{id:"sea-js-与-requirejs-异同："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sea-js-与-requirejs-异同：","aria-hidden":"true"}},[e._v("#")]),e._v(" sea.js 与 RequireJS 异同：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/seajs/seajs/issues/277",target:"_blank",rel:"noopener noreferrer"}},[e._v("与 RequireJS 的异同"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.zhihu.com/question/20351507",target:"_blank",rel:"noopener noreferrer"}},[e._v("AMD 和 CMD 的区别有哪些？"),s("OutboundLink")],1)])]),e._v(" "),s("blockquote",[s("p",[e._v("模块加载器，倡导模块化开发理念")])]),e._v(" "),s("p",[e._v("+++++++++++++++++++++++++++++++++++++++++++")]),e._v(" "),s("h2",{attrs:{id:"es6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6","aria-hidden":"true"}},[e._v("#")]),e._v(" ES6")]),e._v(" "),s("p",[s("strong",[e._v("CommonJS 与 ES6 有两个重大差异")])]),e._v(" "),s("ul",[s("li",[e._v("1.CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。")]),e._v(" "),s("li",[e._v("2.CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")])]),e._v(" "),s("blockquote",[s("p",[e._v("第二个差异是因为 CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。"),s("br"),e._v("\n而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")])]),e._v(" "),s("blockquote",[s("p",[e._v("ES6 模块的运行机制与 CommonJS 不一样。"),s("br"),e._v("\nJS 引擎对脚本静态分析的时候，"),s("strong",[e._v("遇到模块加载命令import，就会生成一个只读引用")]),e._v("。"),s("br"),e._v("\n等到脚本真正执行时，"),s("strong",[e._v("再根据这个只读引用，到被加载的那个模块里面去取值")]),e._v("。")])]),e._v(" "),s("blockquote",[s("p",[e._v("换句话说，ES6 的import有点像 Unix 系统的“符号连接”，"),s("strong",[e._v("原始值变了，import加载的值也会跟着变")]),e._v("。"),s("br"),e._v("\n因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块")])]),e._v(" "),s("h2",{attrs:{id:"import-和-require"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-和-require","aria-hidden":"true"}},[e._v("#")]),e._v(" import 和 require")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("运行时加载: CommonJS 模块就是对象；")]),e._v(" "),s("ul",[s("li",[e._v("即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。")])])]),e._v(" "),s("li",[s("p",[e._v("编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import时采用静态命令的形式。"),s("br"),e._v("\n即在import时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。")])]),e._v(" "),s("li",[s("p",[e._v("import 命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。"),s("br"),e._v("\n也正因为这个，使得静态分析成为可能")])])]),e._v(" "),s("blockquote",[s("p",[e._v("CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。"),s("br"),e._v("\n而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")])]),e._v(" "),s("p",[e._v("想起来 "),s("strong",[e._v("JavaScript 的词法作用域和动态作用域")])]),e._v(" "),s("h2",{attrs:{id:"词法作用域-又称-静态作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域-又称-静态作用域","aria-hidden":"true"}},[e._v("#")]),e._v(" 词法作用域 又称 静态作用域")]),e._v(" "),s("blockquote",[s("p",[e._v("作用域是指程序源代码中定义变量的区域。")])]),e._v(" "),s("blockquote",[s("p",[e._v("作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。")])]),e._v(" "),s("blockquote",[s("p",[e._v("JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。")])]),e._v(" "),s("h2",{attrs:{id:"与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。","aria-hidden":"true"}},[e._v("#")]),e._v(" 与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。")]),e._v(" "),s("ul",[s("li",[e._v("参考：\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/3",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript深入之词法作用域和动态作用域 "),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/4",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript深入之执行上下文栈"),s("OutboundLink")],1)])])])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var scope = "global scope";\nfunction checkscope(){\n    var scope = "local scope";\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope();\nvar scope = "global scope";\nfunction checkscope(){\n    var scope = "local scope";\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()();\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("p",[e._v("猜猜两段代码各自的执行结果是多少？")]),e._v(" "),s("p",[e._v("两段代码都会打印：local scope。")]),e._v(" "),s("p",[e._v("原因也很简单，因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。")]),e._v(" "),s("p",[e._v("两个函数 "),s("strong",[e._v("执行上下文栈")]),e._v(" 不一样:")]),e._v(" "),s("blockquote",[s("p",[e._v("当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。")])]),e._v(" "),s("p",[e._v("而引用《JavaScript权威指南》的回答就是：")]),e._v(" "),s("blockquote",[s("p",[e._v("JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。"),s("br"),e._v("\n嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，"),s("br"),e._v("\n不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。")])]),e._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82",target:"_blank",rel:"noopener noreferrer"}},[e._v("es6---ES6 模块与 CommonJS 模块的差异"),s("OutboundLink")],1)])]),e._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://github.com/panyifei/Front-end-learning/blob/master/%E6%A1%86%E6%9E%B6%E4%BB%A5%E5%8F%8A%E8%A7%84%E8%8C%83/%E6%A8%A1%E5%9D%97%E5%BC%95%E5%85%A5/Commonjs,CMD,AMD%E5%92%8Ccortex%E4%BB%8B%E7%BB%8D.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Commonjs,CMD,AMD和cortex介绍"),s("OutboundLink")],1)])]),e._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://juejin.im/post/5aaa37c8f265da23945f365c",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端模块化：CommonJS,AMD,CMD,ES6"),s("OutboundLink")],1)])])])])},[],!1,null,null,null);r.default=n.exports}}]);